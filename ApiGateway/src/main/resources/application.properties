server.port=8084
spring.cloud.gateway.routes[0].id = users-status-check
# To enable load balancing, change uri to lb://demo-resource-server
# When Spring cloud sees, lb it enables load balancing.
# demo-resource-server is the name of the microservice which has the below endpoint
# The name is configured in the application.properties or bootstrap.properties file
spring.cloud.gateway.routes[0].uri = lb://demo-resource-server
spring.cloud.gateway.routes[0].predicates[0] = Path=/users/status/check
spring.cloud.gateway.routes[0].predicates[1] = Method=GET
spring.cloud.gateway.routes[0].filters[0] = RemoveRequestHeader=Cookie

#Communicate with albums microservice
spring.cloud.gateway.routes[1].id = albums
spring.cloud.gateway.routes[1].uri = lb://ResourceServerAlbums
spring.cloud.gateway.routes[1].predicates[0] = Path=/albums
spring.cloud.gateway.routes[1].predicates[1] = Method=GET
spring.cloud.gateway.routes[1].filters[0] = RemoveRequestHeader=Cookie

#Communicate with photos microservice
spring.cloud.gateway.routes[2].id = photos
spring.cloud.gateway.routes[2].uri = lb://ResourceServerPhotos
spring.cloud.gateway.routes[2].predicates[0] = Path=/photos
spring.cloud.gateway.routes[2].predicates[1] = Method=GET
spring.cloud.gateway.routes[2].filters[0] = RemoveRequestHeader=Cookie


eureka.client.serviceUrl.defaultZone = http://localhost:8010/eureka

# enables each running instance to be shown in Eureka
eureka.instance.instance-id = ${spring.application.name}:${instanceId:${random.value}}

spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping = true