server.port = 8087

spring.security.oauth2.client.registration.mywebclient.client-id = photo-app-webclient
spring.security.oauth2.client.registration.mywebclient.client-secret = 339fdca9-833a-498b-827d-b5e2a9977670
spring.security.oauth2.client.registration.mywebclient.scope = openid, profile, roles
spring.security.oauth2.client.registration.mywebclient.authorization-grant-type = authorization_code
# Parts of URL
# http://localhost:8087 - server and port where this app is running
# /login/oauth2/code - should be coded as is, should not be changed
# /mywebclient - registration id used in each property
spring.security.oauth2.client.registration.mywebclient.redirect-uri = http://localhost:8087/login/oauth2/code/mywebclient

# IDentity provider - keycloak
# Values provided are unique to keycloak, in this impl it is running on http://localhost:8080
# /auth = acquire auth code, /token = acquire access token code, /certs = verify signature of access token, /userinfo = user information
spring.security.oauth2.client.provider.mywebclient.authorization-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/auth
spring.security.oauth2.client.provider.mywebclient.token-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/token
spring.security.oauth2.client.provider.mywebclient.jwk-set-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
spring.security.oauth2.client.provider.mywebclient.user-info-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.mywebclient.user-name-attribute = preferred_username
